/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling


public partial class App : TBase
{
  private long _id;
  private long _userId;
  private int _status;
  private string _name;
  private string _url;
  private string _appKey;
  private List<string> _scopes;
  private List<string> _parameters;

  public long Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public long UserId
  {
    get
    {
      return _userId;
    }
    set
    {
      __isset.userId = true;
      this._userId = value;
    }
  }

  public int Status
  {
    get
    {
      return _status;
    }
    set
    {
      __isset.status = true;
      this._status = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Url
  {
    get
    {
      return _url;
    }
    set
    {
      __isset.url = true;
      this._url = value;
    }
  }

  public string AppKey
  {
    get
    {
      return _appKey;
    }
    set
    {
      __isset.appKey = true;
      this._appKey = value;
    }
  }

  public List<string> Scopes
  {
    get
    {
      return _scopes;
    }
    set
    {
      __isset.scopes = true;
      this._scopes = value;
    }
  }

  public List<string> Parameters
  {
    get
    {
      return _parameters;
    }
    set
    {
      __isset.parameters = true;
      this._parameters = value;
    }
  }


  public Isset __isset;
  public struct Isset
  {
    public bool id;
    public bool userId;
    public bool status;
    public bool name;
    public bool url;
    public bool appKey;
    public bool scopes;
    public bool parameters;
  }

  public App()
  {
  }

  public App DeepCopy()
  {
    var tmp36 = new App();
    if(__isset.id)
    {
      tmp36.Id = this.Id;
    }
    tmp36.__isset.id = this.__isset.id;
    if(__isset.userId)
    {
      tmp36.UserId = this.UserId;
    }
    tmp36.__isset.userId = this.__isset.userId;
    if(__isset.status)
    {
      tmp36.Status = this.Status;
    }
    tmp36.__isset.status = this.__isset.status;
    if((Name != null) && __isset.name)
    {
      tmp36.Name = this.Name;
    }
    tmp36.__isset.name = this.__isset.name;
    if((Url != null) && __isset.url)
    {
      tmp36.Url = this.Url;
    }
    tmp36.__isset.url = this.__isset.url;
    if((AppKey != null) && __isset.appKey)
    {
      tmp36.AppKey = this.AppKey;
    }
    tmp36.__isset.appKey = this.__isset.appKey;
    if((Scopes != null) && __isset.scopes)
    {
      tmp36.Scopes = this.Scopes.DeepCopy();
    }
    tmp36.__isset.scopes = this.__isset.scopes;
    if((Parameters != null) && __isset.parameters)
    {
      tmp36.Parameters = this.Parameters.DeepCopy();
    }
    tmp36.__isset.parameters = this.__isset.parameters;
    return tmp36;
  }

  public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      await iprot.ReadStructBeginAsync(cancellationToken);
      while (true)
      {
        field = await iprot.ReadFieldBeginAsync(cancellationToken);
        if (field.Type == TType.Stop)
        {
          break;
        }

        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.I64)
            {
              Id = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 2:
            if (field.Type == TType.I64)
            {
              UserId = await iprot.ReadI64Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 3:
            if (field.Type == TType.I32)
            {
              Status = await iprot.ReadI32Async(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 4:
            if (field.Type == TType.String)
            {
              Name = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 5:
            if (field.Type == TType.String)
            {
              Url = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 6:
            if (field.Type == TType.String)
            {
              AppKey = await iprot.ReadStringAsync(cancellationToken);
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 7:
            if (field.Type == TType.List)
            {
              {
                TList _list37 = await iprot.ReadListBeginAsync(cancellationToken);
                Scopes = new List<string>(_list37.Count);
                for(int _i38 = 0; _i38 < _list37.Count; ++_i38)
                {
                  string _elem39;
                  _elem39 = await iprot.ReadStringAsync(cancellationToken);
                  Scopes.Add(_elem39);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          case 8:
            if (field.Type == TType.List)
            {
              {
                TList _list40 = await iprot.ReadListBeginAsync(cancellationToken);
                Parameters = new List<string>(_list40.Count);
                for(int _i41 = 0; _i41 < _list40.Count; ++_i41)
                {
                  string _elem42;
                  _elem42 = await iprot.ReadStringAsync(cancellationToken);
                  Parameters.Add(_elem42);
                }
                await iprot.ReadListEndAsync(cancellationToken);
              }
            }
            else
            {
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            }
            break;
          default: 
            await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
            break;
        }

        await iprot.ReadFieldEndAsync(cancellationToken);
      }

      await iprot.ReadStructEndAsync(cancellationToken);
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
  {
    oprot.IncrementRecursionDepth();
    try
    {
      var struc = new TStruct("App");
      await oprot.WriteStructBeginAsync(struc, cancellationToken);
      var field = new TField();
      if(__isset.id)
      {
        field.Name = "id";
        field.Type = TType.I64;
        field.ID = 1;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(Id, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.userId)
      {
        field.Name = "userId";
        field.Type = TType.I64;
        field.ID = 2;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI64Async(UserId, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if(__isset.status)
      {
        field.Name = "status";
        field.Type = TType.I32;
        field.ID = 3;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteI32Async(Status, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Name != null) && __isset.name)
      {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 4;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Name, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Url != null) && __isset.url)
      {
        field.Name = "url";
        field.Type = TType.String;
        field.ID = 5;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(Url, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((AppKey != null) && __isset.appKey)
      {
        field.Name = "appKey";
        field.Type = TType.String;
        field.ID = 6;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        await oprot.WriteStringAsync(AppKey, cancellationToken);
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Scopes != null) && __isset.scopes)
      {
        field.Name = "scopes";
        field.Type = TType.List;
        field.ID = 7;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Scopes.Count), cancellationToken);
          foreach (string _iter43 in Scopes)
          {
            await oprot.WriteStringAsync(_iter43, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      if((Parameters != null) && __isset.parameters)
      {
        field.Name = "parameters";
        field.Type = TType.List;
        field.ID = 8;
        await oprot.WriteFieldBeginAsync(field, cancellationToken);
        {
          await oprot.WriteListBeginAsync(new TList(TType.String, Parameters.Count), cancellationToken);
          foreach (string _iter44 in Parameters)
          {
            await oprot.WriteStringAsync(_iter44, cancellationToken);
          }
          await oprot.WriteListEndAsync(cancellationToken);
        }
        await oprot.WriteFieldEndAsync(cancellationToken);
      }
      await oprot.WriteFieldStopAsync(cancellationToken);
      await oprot.WriteStructEndAsync(cancellationToken);
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override bool Equals(object that)
  {
    if (!(that is App other)) return false;
    if (ReferenceEquals(this, other)) return true;
    return ((__isset.id == other.__isset.id) && ((!__isset.id) || (System.Object.Equals(Id, other.Id))))
      && ((__isset.userId == other.__isset.userId) && ((!__isset.userId) || (System.Object.Equals(UserId, other.UserId))))
      && ((__isset.status == other.__isset.status) && ((!__isset.status) || (System.Object.Equals(Status, other.Status))))
      && ((__isset.name == other.__isset.name) && ((!__isset.name) || (System.Object.Equals(Name, other.Name))))
      && ((__isset.url == other.__isset.url) && ((!__isset.url) || (System.Object.Equals(Url, other.Url))))
      && ((__isset.appKey == other.__isset.appKey) && ((!__isset.appKey) || (System.Object.Equals(AppKey, other.AppKey))))
      && ((__isset.scopes == other.__isset.scopes) && ((!__isset.scopes) || (TCollections.Equals(Scopes, other.Scopes))))
      && ((__isset.parameters == other.__isset.parameters) && ((!__isset.parameters) || (TCollections.Equals(Parameters, other.Parameters))));
  }

  public override int GetHashCode() {
    int hashcode = 157;
    unchecked {
      if(__isset.id)
      {
        hashcode = (hashcode * 397) + Id.GetHashCode();
      }
      if(__isset.userId)
      {
        hashcode = (hashcode * 397) + UserId.GetHashCode();
      }
      if(__isset.status)
      {
        hashcode = (hashcode * 397) + Status.GetHashCode();
      }
      if((Name != null) && __isset.name)
      {
        hashcode = (hashcode * 397) + Name.GetHashCode();
      }
      if((Url != null) && __isset.url)
      {
        hashcode = (hashcode * 397) + Url.GetHashCode();
      }
      if((AppKey != null) && __isset.appKey)
      {
        hashcode = (hashcode * 397) + AppKey.GetHashCode();
      }
      if((Scopes != null) && __isset.scopes)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Scopes);
      }
      if((Parameters != null) && __isset.parameters)
      {
        hashcode = (hashcode * 397) + TCollections.GetHashCode(Parameters);
      }
    }
    return hashcode;
  }

  public override string ToString()
  {
    var sb = new StringBuilder("App(");
    int tmp45 = 0;
    if(__isset.id)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("Id: ");
      Id.ToString(sb);
    }
    if(__isset.userId)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("UserId: ");
      UserId.ToString(sb);
    }
    if(__isset.status)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("Status: ");
      Status.ToString(sb);
    }
    if((Name != null) && __isset.name)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("Name: ");
      Name.ToString(sb);
    }
    if((Url != null) && __isset.url)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("Url: ");
      Url.ToString(sb);
    }
    if((AppKey != null) && __isset.appKey)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("AppKey: ");
      AppKey.ToString(sb);
    }
    if((Scopes != null) && __isset.scopes)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("Scopes: ");
      Scopes.ToString(sb);
    }
    if((Parameters != null) && __isset.parameters)
    {
      if(0 < tmp45++) { sb.Append(", "); }
      sb.Append("Parameters: ");
      Parameters.ToString(sb);
    }
    sb.Append(')');
    return sb.ToString();
  }
}

