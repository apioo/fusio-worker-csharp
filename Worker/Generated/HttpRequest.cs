/**
 * Autogenerated by Thrift Compiler (0.14.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Logging;
using Thrift;
using Thrift.Collections;

using Thrift.Protocol;
using Thrift.Protocol.Entities;
using Thrift.Protocol.Utilities;
using Thrift.Transport;
using Thrift.Transport.Client;
using Thrift.Transport.Server;
using Thrift.Processor;


#pragma warning disable IDE0079  // remove unnecessary pragmas
#pragma warning disable IDE1006  // parts of the code use IDL spelling

namespace FusioWorker.Generated
{

  public partial class HttpRequest : TBase
  {
    private string _method;
    private Dictionary<string, string> _headers;
    private Dictionary<string, string> _uriFragments;
    private Dictionary<string, string> _parameters;
    private string _body;

    public string Method
    {
      get
      {
        return _method;
      }
      set
      {
        __isset.method = true;
        this._method = value;
      }
    }

    public Dictionary<string, string> Headers
    {
      get
      {
        return _headers;
      }
      set
      {
        __isset.headers = true;
        this._headers = value;
      }
    }

    public Dictionary<string, string> UriFragments
    {
      get
      {
        return _uriFragments;
      }
      set
      {
        __isset.uriFragments = true;
        this._uriFragments = value;
      }
    }

    public Dictionary<string, string> Parameters
    {
      get
      {
        return _parameters;
      }
      set
      {
        __isset.parameters = true;
        this._parameters = value;
      }
    }

    public string Body
    {
      get
      {
        return _body;
      }
      set
      {
        __isset.body = true;
        this._body = value;
      }
    }


    public Isset __isset;
    public struct Isset
    {
      public bool method;
      public bool headers;
      public bool uriFragments;
      public bool parameters;
      public bool body;
    }

    public HttpRequest()
    {
    }

    public HttpRequest DeepCopy()
    {
      var tmp15 = new HttpRequest();
      if((Method != null) && __isset.method)
      {
        tmp15.Method = this.Method;
      }
      tmp15.__isset.method = this.__isset.method;
      if((Headers != null) && __isset.headers)
      {
        tmp15.Headers = this.Headers.DeepCopy();
      }
      tmp15.__isset.headers = this.__isset.headers;
      if((UriFragments != null) && __isset.uriFragments)
      {
        tmp15.UriFragments = this.UriFragments.DeepCopy();
      }
      tmp15.__isset.uriFragments = this.__isset.uriFragments;
      if((Parameters != null) && __isset.parameters)
      {
        tmp15.Parameters = this.Parameters.DeepCopy();
      }
      tmp15.__isset.parameters = this.__isset.parameters;
      if((Body != null) && __isset.body)
      {
        tmp15.Body = this.Body;
      }
      tmp15.__isset.body = this.__isset.body;
      return tmp15;
    }

    public async global::System.Threading.Tasks.Task ReadAsync(TProtocol iprot, CancellationToken cancellationToken)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        await iprot.ReadStructBeginAsync(cancellationToken);
        while (true)
        {
          field = await iprot.ReadFieldBeginAsync(cancellationToken);
          if (field.Type == TType.Stop)
          {
            break;
          }

          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String)
              {
                Method = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 2:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map16 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Headers = new Dictionary<string, string>(_map16.Count);
                  for(int _i17 = 0; _i17 < _map16.Count; ++_i17)
                  {
                    string _key18;
                    string _val19;
                    _key18 = await iprot.ReadStringAsync(cancellationToken);
                    _val19 = await iprot.ReadStringAsync(cancellationToken);
                    Headers[_key18] = _val19;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 3:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map20 = await iprot.ReadMapBeginAsync(cancellationToken);
                  UriFragments = new Dictionary<string, string>(_map20.Count);
                  for(int _i21 = 0; _i21 < _map20.Count; ++_i21)
                  {
                    string _key22;
                    string _val23;
                    _key22 = await iprot.ReadStringAsync(cancellationToken);
                    _val23 = await iprot.ReadStringAsync(cancellationToken);
                    UriFragments[_key22] = _val23;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 4:
              if (field.Type == TType.Map)
              {
                {
                  TMap _map24 = await iprot.ReadMapBeginAsync(cancellationToken);
                  Parameters = new Dictionary<string, string>(_map24.Count);
                  for(int _i25 = 0; _i25 < _map24.Count; ++_i25)
                  {
                    string _key26;
                    string _val27;
                    _key26 = await iprot.ReadStringAsync(cancellationToken);
                    _val27 = await iprot.ReadStringAsync(cancellationToken);
                    Parameters[_key26] = _val27;
                  }
                  await iprot.ReadMapEndAsync(cancellationToken);
                }
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            case 5:
              if (field.Type == TType.String)
              {
                Body = await iprot.ReadStringAsync(cancellationToken);
              }
              else
              {
                await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              }
              break;
            default: 
              await TProtocolUtil.SkipAsync(iprot, field.Type, cancellationToken);
              break;
          }

          await iprot.ReadFieldEndAsync(cancellationToken);
        }

        await iprot.ReadStructEndAsync(cancellationToken);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public async global::System.Threading.Tasks.Task WriteAsync(TProtocol oprot, CancellationToken cancellationToken)
    {
      oprot.IncrementRecursionDepth();
      try
      {
        var struc = new TStruct("HttpRequest");
        await oprot.WriteStructBeginAsync(struc, cancellationToken);
        var field = new TField();
        if((Method != null) && __isset.method)
        {
          field.Name = "method";
          field.Type = TType.String;
          field.ID = 1;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Method, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Headers != null) && __isset.headers)
        {
          field.Name = "headers";
          field.Type = TType.Map;
          field.ID = 2;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Headers.Count), cancellationToken);
            foreach (string _iter28 in Headers.Keys)
            {
              await oprot.WriteStringAsync(_iter28, cancellationToken);
              await oprot.WriteStringAsync(Headers[_iter28], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((UriFragments != null) && __isset.uriFragments)
        {
          field.Name = "uriFragments";
          field.Type = TType.Map;
          field.ID = 3;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, UriFragments.Count), cancellationToken);
            foreach (string _iter29 in UriFragments.Keys)
            {
              await oprot.WriteStringAsync(_iter29, cancellationToken);
              await oprot.WriteStringAsync(UriFragments[_iter29], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Parameters != null) && __isset.parameters)
        {
          field.Name = "parameters";
          field.Type = TType.Map;
          field.ID = 4;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          {
            await oprot.WriteMapBeginAsync(new TMap(TType.String, TType.String, Parameters.Count), cancellationToken);
            foreach (string _iter30 in Parameters.Keys)
            {
              await oprot.WriteStringAsync(_iter30, cancellationToken);
              await oprot.WriteStringAsync(Parameters[_iter30], cancellationToken);
            }
            await oprot.WriteMapEndAsync(cancellationToken);
          }
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        if((Body != null) && __isset.body)
        {
          field.Name = "body";
          field.Type = TType.String;
          field.ID = 5;
          await oprot.WriteFieldBeginAsync(field, cancellationToken);
          await oprot.WriteStringAsync(Body, cancellationToken);
          await oprot.WriteFieldEndAsync(cancellationToken);
        }
        await oprot.WriteFieldStopAsync(cancellationToken);
        await oprot.WriteStructEndAsync(cancellationToken);
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override bool Equals(object that)
    {
      if (!(that is HttpRequest other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ((__isset.method == other.__isset.method) && ((!__isset.method) || (System.Object.Equals(Method, other.Method))))
        && ((__isset.headers == other.__isset.headers) && ((!__isset.headers) || (TCollections.Equals(Headers, other.Headers))))
        && ((__isset.uriFragments == other.__isset.uriFragments) && ((!__isset.uriFragments) || (TCollections.Equals(UriFragments, other.UriFragments))))
        && ((__isset.parameters == other.__isset.parameters) && ((!__isset.parameters) || (TCollections.Equals(Parameters, other.Parameters))))
        && ((__isset.body == other.__isset.body) && ((!__isset.body) || (System.Object.Equals(Body, other.Body))));
    }

    public override int GetHashCode() {
      int hashcode = 157;
      unchecked {
        if((Method != null) && __isset.method)
        {
          hashcode = (hashcode * 397) + Method.GetHashCode();
        }
        if((Headers != null) && __isset.headers)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Headers);
        }
        if((UriFragments != null) && __isset.uriFragments)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(UriFragments);
        }
        if((Parameters != null) && __isset.parameters)
        {
          hashcode = (hashcode * 397) + TCollections.GetHashCode(Parameters);
        }
        if((Body != null) && __isset.body)
        {
          hashcode = (hashcode * 397) + Body.GetHashCode();
        }
      }
      return hashcode;
    }

    public override string ToString()
    {
      var sb = new StringBuilder("HttpRequest(");
      int tmp31 = 0;
      if((Method != null) && __isset.method)
      {
        if(0 < tmp31++) { sb.Append(", "); }
        sb.Append("Method: ");
        Method.ToString(sb);
      }
      if((Headers != null) && __isset.headers)
      {
        if(0 < tmp31++) { sb.Append(", "); }
        sb.Append("Headers: ");
        Headers.ToString(sb);
      }
      if((UriFragments != null) && __isset.uriFragments)
      {
        if(0 < tmp31++) { sb.Append(", "); }
        sb.Append("UriFragments: ");
        UriFragments.ToString(sb);
      }
      if((Parameters != null) && __isset.parameters)
      {
        if(0 < tmp31++) { sb.Append(", "); }
        sb.Append("Parameters: ");
        Parameters.ToString(sb);
      }
      if((Body != null) && __isset.body)
      {
        if(0 < tmp31++) { sb.Append(", "); }
        sb.Append("Body: ");
        Body.ToString(sb);
      }
      sb.Append(')');
      return sb.ToString();
    }
  }

}
